{"version":3,"sources":["utilities/utilities.js","contexts/appContext.js","components/ProcessAudio.js","components/Header.js","App.js","index.js"],"names":["getPitchHz","modelPitch","cqt_bin","Math","pow","AppContext","createContext","GlobalContext","useContext","AppContextProvider","children","useState","model","setModel","start","setStart","useEffect","a","tf","fromTFHub","loadModel","Provider","value","ProcessAudio","error","setError","pitch","setPitch","audioContext","useRef","handleSuccess","stream","current","AudioContext","latencyHint","sampleRate","source","createMediaStreamSource","processor","createScriptProcessor","channelInterpretation","channelCount","connect","destination","onaudioprocess","e","inputData","inputBuffer","getChannelData","input","output","execute","input_audio_samples","uncertainties","dataSync","pitches","console","log","i","length","handleError","err","navigator","mediaDevices","getUserMedia","audio","video","then","catch","close","Container","Alert","variant","Card","Header","style","justifyContent","className","float","Navbar","bg","expand","collapseOnSelect","to","Brand","Nav","Link","onClick","disabled","Button","Spinner","as","animation","size","role","aria-hidden","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fa6e15aa.chunk.js","sourcesContent":["export const downsampleBuffer = (\n  buffer,\n  recordSampleRate,\n  targetSampleRate\n) => {\n  if (targetSampleRate === recordSampleRate) return buffer;\n  if (targetSampleRate > recordSampleRate)\n    throw new Error(\n      \"Target sample rate must be lower than recorded sample rate\"\n    );\n\n  const sampleRateRatio = recordSampleRate / targetSampleRate;\n  const newLength = Math.round(buffer.length / sampleRateRatio);\n  const result = new Float32Array(newLength);\n\n  let offsetResult = 0;\n  let offsetBuffer = 0;\n\n  while (offsetResult < result.length) {\n    let nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\n    let accum = 0;\n    let count = 0;\n\n    for (let i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {\n      accum += buffer[i];\n      count++;\n    }\n\n    result[offsetResult] = accum / count;\n    offsetResult++;\n    offsetBuffer = nextOffsetBuffer;\n  }\n\n  return result;\n};\n\nexport const normalize = (data) => {\n  // Normalizing the data\n  const absValue = data.map((sample) => {\n    return Math.abs(sample);\n  });\n  const maxValue = Math.max(...absValue);\n  const normalized = data.map((sample) => {\n    return sample / maxValue;\n  });\n  return normalized;\n};\n\nexport const getPitchHz = (modelPitch) => {\n  const PT_OFFSET = 25.58;\n  const PT_SLOPE = 63.07;\n  const fmin = 10.0;\n  const bins_per_octave = 12.0;\n  const cqt_bin = modelPitch * PT_SLOPE + PT_OFFSET;\n  return fmin * Math.pow(2.0, (1.0 * cqt_bin) / bins_per_octave);\n};\n","import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\n\nconst AppContext = createContext();\n\nexport const GlobalContext = () => {\n  return useContext(AppContext);\n};\n\nconst AppContextProvider = ({ children }) => {\n  //   Constant for APP\n  const MODEL_URL = \"https://tfhub.dev/google/tfjs-model/spice/2/default/1\";\n\n  const [model, setModel] = useState(null);\n  const [start, setStart] = useState(false);\n\n  useEffect(() => {\n    const loadModel = async () => {\n      const model = await tf.loadGraphModel(MODEL_URL, {\n        fromTFHub: true,\n      });\n      setModel(model);\n    };\n    loadModel();\n  }, []);\n\n  return (\n    <AppContext.Provider\n      value={{\n        model,\n        start,\n        setStart,\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n};\nexport default AppContextProvider;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport * as tf from \"@tensorflow/tfjs\";\nimport { getPitchHz } from \"../utilities/utilities\";\nimport { GlobalContext } from \"../contexts/appContext\";\nimport { Card, Container, Alert } from \"react-bootstrap\";\n\nconst ProcessAudio = () => {\n  const { model } = GlobalContext();\n  const NUM_INPUT_SAMPLES = 1024;\n  const MODEL_SAMPLE_RATE = 16000;\n  const CONF_THRESHOLD = 0.9;\n\n  const [error, setError] = useState(\"\");\n  const [pitch, setPitch] = useState(0);\n\n  const audioContext = useRef(null);\n  const handleSuccess = (stream) => {\n    audioContext.current = new AudioContext({\n      latencyHint: \"playback\",\n      sampleRate: MODEL_SAMPLE_RATE,\n    });\n\n    const source = audioContext.current.createMediaStreamSource(stream);\n    const processor = audioContext.current.createScriptProcessor(\n      NUM_INPUT_SAMPLES,\n      1,\n      1\n    );\n    // Converts audio to mono.\n    processor.channelInterpretation = \"speakers\";\n    processor.channelCount = 1;\n\n    // Runs processor on audio source.\n    source.connect(processor);\n\n    processor.connect(audioContext.current.destination);\n\n    processor.onaudioprocess = async (e) => {\n      const inputData = e.inputBuffer.getChannelData(0);\n      const input = tf.reshape(tf.tensor(inputData), [NUM_INPUT_SAMPLES]);\n      const output = model.execute({ input_audio_samples: input });\n      const uncertainties = output[0].dataSync();\n      const pitches = output[1].dataSync();\n      console.log(audioContext.current.sampleRate);\n      for (let i = 0; i < pitches.length; ++i) {\n        let confidence = 1.0 - uncertainties[i];\n        if (confidence < CONF_THRESHOLD) {\n          continue;\n        }\n        setPitch(getPitchHz(pitches[i]));\n      }\n    };\n  };\n\n  const handleError = (err) => {\n    setError(err);\n  };\n\n  useEffect(() => {\n    navigator.mediaDevices\n      .getUserMedia({ audio: true, video: false })\n      .then(handleSuccess)\n      .catch(handleError);\n\n    return () => {\n      audioContext.current && audioContext.current.close();\n      console.log(\"Component unmounted\");\n    };\n    // eslint-disable-next-line\n  }, []);\n  return (\n    <Container>\n      {error && <Alert variant=\"danger\">{error}</Alert>}\n      <Card>\n        <Card.Header>\n          {pitch !== 0 &&\n            (pitch > 70.0 && pitch < 165.0 ? (\n              <span style={{ justifyContent: \"space-between\" }}>\n                <i className=\"fas fa-male\"></i>\n                <p style={{ float: \"right\" }}>male: {pitch}</p>\n              </span>\n            ) : (\n              <span style={{ justifyContent: \"space-between\" }}>\n                <i className=\"fas fa-female\"></i>\n                <p style={{ float: \"right\" }}>female: {pitch}</p>\n              </span>\n            ))}\n        </Card.Header>\n      </Card>\n    </Container>\n  );\n};\n\nexport default ProcessAudio;\n","import React from \"react\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { Navbar, Nav, Container, Button, Spinner } from \"react-bootstrap\";\nimport { GlobalContext } from \"../contexts/appContext\";\n\nconst Header = () => {\n  const { start, setStart, model } = GlobalContext();\n\n  const stopHandler = (e) => {\n    setStart(false);\n  };\n\n  const startHandler = (e) => {\n    setStart(true);\n  };\n\n  return (\n    <header>\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" collapseOnSelect>\n        <Container>\n          <LinkContainer to=\"/\">\n            <Navbar.Brand>\n              <i className=\"fas fa-home\"></i>\n            </Navbar.Brand>\n          </LinkContainer>\n\n          <Nav className=\"ml-auto\">\n            {model ? (\n              <>\n                <Nav.Link onClick={startHandler} disabled={start}>\n                  <i className=\"fas fa-play\"></i>Start\n                </Nav.Link>\n                <Nav.Link onClick={stopHandler} disabled={!start}>\n                  <i className=\"fas fa-stop-circle\"></i>Stop\n                </Nav.Link>{\" \"}\n              </>\n            ) : (\n              <Button variant=\"primary\" disabled>\n                <Spinner\n                  as=\"span\"\n                  animation=\"grow\"\n                  size=\"sm\"\n                  role=\"status\"\n                  aria-hidden=\"true\"\n                />\n                model loading...\n              </Button>\n            )}\n          </Nav>\n        </Container>\n      </Navbar>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport ProcessAudio from \"./components/ProcessAudio\";\nimport Header from \"./components/Header\";\nimport { GlobalContext } from \"./contexts/appContext\";\nimport { Container } from \"react-bootstrap\";\n\nfunction App() {\n  const { model, start } = GlobalContext();\n  return (\n    <Router>\n      <Header />\n      <Container>{model && start && <ProcessAudio />}</Container>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport App from \"./App\";\nimport AppContextProvider from \"./contexts/appContext\";\n\nReactDOM.render(\n  <AppContextProvider>\n    <App />\n  </AppContextProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}